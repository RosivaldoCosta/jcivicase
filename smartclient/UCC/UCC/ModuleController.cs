//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Sante.EMR.SmartClient.UCC.Constants;
using Sante.EMR.SmartClient.UCC.Properties;
using Microsoft.Practices.CompositeUI.EventBroker;
using Sante.EMR.SmartClient.MCT;

namespace Sante.EMR.SmartClient.UCC
{
    public class ModuleController : WorkItemController
    {
        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            ToolStripMenuItem menu = new ToolStripMenuItem(Properties.Resources.ModuleTitle);
            

            //WorkItem.Commands[CommandNames.New].AddInvoker(item, "Click");

            WorkItem.UIExtensionSites[UIExtensionSiteNames.NewMenu].Add(menu);
        }

        private void ExtendToolStrip()
        {
            this.RegisterLaunchPoint(Properties.Resources.ModuleTitle, Properties.Resources.UCCIcon, CommandNames.UCCMenu);
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm

            // To create and add a view you can customize the following sentence
            // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);

        }

        [CommandHandler(CommandNames.UCCMenu)]
        public void OnUCCMenu(object sender, EventArgs e)
        {
            ShowViewInWorkspace<UCCView>(WorkspaceNames.PrimaryWorkspace);
        }

        
        [EventSubscription(EventTopicNames.ShowNotesForm, ThreadOption.UserInterface)]
        public void OnShowNotesForm(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<NotesView>(WorkspaceNames.ModalWindows);
        }

        [EventSubscription(EventTopicNames.ShowMedicalEval, ThreadOption.UserInterface)]
        public void OnShowMedicalEval(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<MedicalEvalView>(WorkspaceNames.ModalWindows);
        }

        [EventSubscription(EventTopicNames.ShowInformedConsentForm, ThreadOption.UserInterface)]
        public void OnShowInformedConsent(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<InformedConsentView>(WorkspaceNames.ModalWindows);
        }
      
        [EventSubscription(EventTopicNames.ShowHumanRightsForm, ThreadOption.UserInterface)]
        public void OnShowHumanRightsForm(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<HumanRightsNotificationView>(WorkspaceNames.ModalWindows);
        }

        [EventSubscription(EventTopicNames.ShowInformedMedicalConsent, ThreadOption.UserInterface)]
        public void OnInformedConsentForMedicationView(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<InformedConsentForMedicationView>(WorkspaceNames.ModalWindows);
        }
        //[EventSubscription(EventTopicNames.ShowTelephoneContact, ThreadOption.UserInterface)]
        //public void OnShowCaseNumberForm(object sender, EventArgs eventArgs)
        //{//TODO: Add your code here
        //    ShowViewInWorkspace<TelephoneContactView>(WorkspaceNames.ModalWindows);
        //}

      
        

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-350-Registering_Commands.htm
        //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm
    }
}
