//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using System.Collections.Generic;
using Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;

namespace Sante.EMR.SmartClient.Module.NewCase
{
    public partial class NewCaseView : UserControl, INewCaseView, ISmartPartInfo
    {
        private string _firstName;
        private string _lastName;
        private string _phone;
        private string _address;
        Patient _selectedPatient;

        public NewCaseView()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void button1_Click(object sender, EventArgs e)
        {
            List<Patient> patients = new List<Patient>();

            if (FirstNameTextBox.Text != String.Empty)
            {
                if (LastNameTextBox.Text != String.Empty)
                {
                    if (PhoneTextBox.Text != String.Empty)
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(FirstNameTextBox.Text, LastNameTextBox.Text, PhoneTextBox.Text, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(FirstNameTextBox.Text, LastNameTextBox.Text, PhoneTextBox.Text, null);
                    }
                    else
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(FirstNameTextBox.Text, LastNameTextBox.Text, null, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(FirstNameTextBox.Text, LastNameTextBox.Text, null, null);

                    }
                }
                else
                {
                    if (PhoneTextBox.Text != String.Empty)
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(FirstNameTextBox.Text, null, PhoneTextBox.Text, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(FirstNameTextBox.Text, null, PhoneTextBox.Text, null);
                    }
                    else
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(FirstNameTextBox.Text, null, null, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(FirstNameTextBox.Text,null,null,null);

                    }
                }
            }
            else
            {
                if (LastNameTextBox.Text != String.Empty)
                {
                    if (PhoneTextBox.Text != String.Empty)
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(null,LastNameTextBox.Text, PhoneTextBox.Text, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(null,LastNameTextBox.Text, PhoneTextBox.Text,null);
                    }
                    else
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(null,LastNameTextBox.Text,null, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(null,LastNameTextBox.Text,null,null);

                    }
                }
                else
                {
                    if (PhoneTextBox.Text != String.Empty)
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(null,null,PhoneTextBox.Text, AddressTextBox.Text);
                        else
                            patients = _presenter.Search(null,null,PhoneTextBox.Text,null);
                    }
                    else
                    {
                        if (AddressTextBox.Text != String.Empty)
                            patients = _presenter.Search(null,null,null,AddressTextBox.Text);
                        
                    }
                }
            }

            this.patientBindingSource.Clear();
            
           _presenter.BindToSearchResults(patients);

        }

        #region ISmartPartInfo Members

        public string Description
        {
            get
            {
                throw new Exception("The method or operation is not implemented.");
            }
            set
            {
                throw new Exception("The method or operation is not implemented.");
            }
        }

        public string Title
        {
            get
            {
                throw new Exception("The method or operation is not implemented.");
            }
            set
            {
                throw new Exception("The method or operation is not implemented.");
            }
        }

        #endregion

        #region INewCaseView Members

        public void BindToSearchResults(List<Patient> patient)
        {
            foreach (Patient p in patient)
            {
                int i = patientBindingSource.Add(p);
            }
        }

        public List<Patient> Search(params object[] args)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        #endregion

        private void ResultsDataGridView_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void ResultsDataGridView_SelectionChanged(object sender, EventArgs e)
        {
            if (this.ResultsDataGridView.SelectedRows.Count > 0 && this.ResultsDataGridView.SelectedRows[0] != null)
            {
                _selectedPatient = (Patient)this.ResultsDataGridView.SelectedRows[0].DataBoundItem;
                
            }
        }
    }
}

