//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by this guidance package as part of the solution template
//
// The ShellApplication class is the entry point for your application. ShellApplication 
// contains the Main method and derives from FormShellApplication base class which is
// provided by the Composite UI Application Block (CAB).
// 
// Note that the RootWorkItem is the default WorkItem provided by CAB.
// 
// It also implements basic exception handling using Enterprise Library Exception
// Handling Application Block.
//
// The basic shell in this Guidance Package (ShellForm) has a menu, a statusbar and
// the screen is divided in 2 workspaces (left and right panes) separated by a spliter
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-010-How_to_Create_Smart_Client_Solutions.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.WinForms;
using Microsoft.Practices.EnterpriseLibrary.ExceptionHandling;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Sante.EMR.SmartClient.Infrastructure.Interface.Services;
using Sante.EMR.SmartClient.Infrastructure.Shell.Constants;
using Sante.EMR.SmartClient.Infrastructure.Library;
using Microsoft.Practices.CompositeUI.EventBroker;


namespace Sante.EMR.SmartClient.Infrastructure.Shell
{
    /// <summary>
    /// Main application entry point class.
    /// Note that the class derives from CAB supplied base class FormShellApplication, and the 
    /// main form will be ShellForm, also created by default by this solution template
    /// </summary>
    class ShellApplication : SmartClientApplication<WorkItem, ShellForm>
    {
        /// <summary>
        /// Application entry point.
        /// </summary>
        [STAThread]
        static void Main()
        {
#if (DEBUG)
			RunInDebugMode();
#else
            RunInReleaseMode();
#endif
        }

        private static void RunInDebugMode()
        {
            Application.SetCompatibleTextRenderingDefault(false);
            new ShellApplication().Run();
        }

        private static void RunInReleaseMode()
        {
            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(AppDomainUnhandledException);
            Application.SetCompatibleTextRenderingDefault(false);
            try
            {
                new ShellApplication().Run();
            }
            catch (Exception ex)
            {
                HandleException(ex);
            }
        }

        /// <summary>
        /// Sets the extension site registration after the shell has been created.
        /// </summary>
        protected override void AfterShellCreated()
        {
            base.AfterShellCreated();

            this.Shell.FormClosing += new FormClosingEventHandler(Shell_FormClosing);
            
            RootWorkItem.UIExtensionSites.RegisterSite(UIExtensionSiteNames.MainMenu, this.Shell.MainMenuStrip);
            RootWorkItem.UIExtensionSites.RegisterSite(UIExtensionSiteNames.FileMenu, ((ToolStripMenuItem)this.Shell.MainMenuStrip.Items[0]).DropDown);
            RootWorkItem.UIExtensionSites.RegisterSite(UIExtensionSiteNames.NewMenu, ((ToolStripMenuItem)((ToolStripMenuItem)this.Shell.MainMenuStrip.Items[0]).DropDown.Items[0]).DropDown);
            
            RootWorkItem.UIExtensionSites.RegisterSite(UIExtensionSiteNames.MainStatus, this.Shell.MainStatusStrip);
            RootWorkItem.UIExtensionSites.RegisterSite(UIExtensionSiteNames.LaunchBar, this.Shell.LaunchBar);
            
            WindowWorkspace wsp = new WindowWorkspace(this.Shell);
            RootWorkItem.Workspaces.Add(wsp, WorkspaceNames.ModalWindows);

        }

      
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void Shell_FormClosing(object sender, FormClosingEventArgs e)
        {
            EventArgs<string> ev = new EventArgs<string>(e.CloseReason.ToString());
            RootWorkItem.EventTopics[EventTopicNames.SerializeOutbox].Fire(this, ev, RootWorkItem, PublicationScope.Global);
            RootWorkItem.EventTopics[EventTopicNames.Kill].Fire(this, ev, RootWorkItem, PublicationScope.Global);
        
        }


        private static void AppDomainUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            HandleException(e.ExceptionObject as Exception);
        }

        private static void HandleException(Exception ex)
        {
            if (ex == null)
                return;

           // ExceptionPolicy.HandleException(ex, "Default Policy");
            MessageBox.Show("An unhandled exception occurred.\n\n"+ex.Message);
            Application.Exit();
        }
    }
}
