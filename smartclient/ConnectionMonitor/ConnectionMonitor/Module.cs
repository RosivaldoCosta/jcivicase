//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The Module class derives from the CAB base class ModuleInit and it will be instantiated
// when the module is loaded by the CAB infrastructure.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-020-How_to_Create_a_Business_Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Services;
using Microsoft.Practices.ObjectBuilder;
using Sante.EMR.SmartClient.ConnectionMonitor.Constants;
using Microsoft.Practices.SmartClient.ConnectionMonitor;
using Sante.EMR.SmartClient.Infrastructure.Module.ConnectionMonitor;
//using Sante.EMR.SmartClient.Infrastructure.Interface.Constants;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Sante.EMR.SmartClient.Infrastructure.Logger.Constants;

using Microsoft.Practices.CompositeUI.EventBroker;

namespace Sante.EMR.SmartClient.Infrastructure.Module.ConnectionMonitor
{
    public class Module : ModuleInit
    {
        private WorkItem _rootWorkItem;
        
        [InjectionConstructor]
        public Module([ServiceDependency] WorkItem rootWorkItem)
        {
            _rootWorkItem = rootWorkItem;
        }

        public override void Load()
        {
            base.Load();

            EventArgs<string> ev = new EventArgs<string>(this.GetType() + " successfully loaded...");
            _rootWorkItem.EventTopics[Sante.EMR.SmartClient.Infrastructure.Logger.Constants.EventTopicNames.WriteToLog].Fire(this, ev, _rootWorkItem, PublicationScope.WorkItem);
            // NOTE: 
            // The layout view in this module defines the layout of the shell. To do this, it
            // loads its view into a shell Workspace named "LayoutWorkspace". If the shell does 
            // not contain a Workspace with this name, the module will throw a ModuleLoadException exception. 
            // 
            // If you see this exception, you can modify the ShowLayoutView method to use a Workspace 
            // name available in shell, or change the name of a Workspace in the shell to "LayoutWorkspace".

            
            
           // ShowLayoutView();
        }

        private void ShowLayoutView()
        {
            if (_rootWorkItem.Workspaces.Contains(Sante.EMR.SmartClient.ConnectionMonitor.Constants.WorkspaceNames.PrimaryWorkspace))
            {
                LayoutView layout = _rootWorkItem.Items.AddNew<LayoutView>();
                _rootWorkItem.Workspaces[Sante.EMR.SmartClient.ConnectionMonitor.Constants.WorkspaceNames.LayoutWorkspace].Show(layout);
            }
            else
                throw new ModuleLoadException("LayoutWorkpsace not found");
        }
    }
}
