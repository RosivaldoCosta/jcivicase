//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using BusinessEntitiesAlias = Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;
using Sante.EMR.SmartClient.OPS.Constants;
using System.Windows.Forms;
using Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;

namespace Sante.EMR.SmartClient.OPS
{
    public partial class NewIntakeESFormViewPresenter : Presenter<INewIntakeFormView>
    {
       
        /// <summary>
        /// This method is a placeholder that will be called by the view when it has been loaded.
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        public bool SaveCase(Case c)
        {
            EventArgs<BusinessEntitiesAlias.Case> e = new EventArgs<BusinessEntitiesAlias.Case>(c);

            try
            {
                WorkItem.EventTopics["NewCase"].Fire(this, e, WorkItem, PublicationScope.Global);
            }
            catch (Exception ex)
            {
                return false;
            }

            //MessageBox.Show("Intake form was successfuly saved");
            
            return true;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="form"></param>
        public void SaveForm(BusinessEntitiesAlias.Form form)
        {
           EventArgs<BusinessEntitiesAlias.Form> e = new EventArgs<BusinessEntitiesAlias.Form>(form);
            
            WorkItem.EventTopics["SaveFormEvent"].Fire(this, e, WorkItem, PublicationScope.Global);
            
        }

        internal void ShowMsg(string p)
        {
            MessageBox.Show(p);
          }
    }
}

