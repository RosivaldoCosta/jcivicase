<?php

/*
 +--------------------------------------------------------------------+
 | CiviCRM version 3.1                                                |
 +--------------------------------------------------------------------+
 | Copyright CiviCRM LLC (c) 2004-2009                                |
 +--------------------------------------------------------------------+
 | This file is a part of CiviCRM.                                    |
 |                                                                    |
 | CiviCRM is free software; you can copy, modify, and distribute it  |
 | under the terms of the GNU Affero General Public License           |
 | Version 3, 19 November 2007.                                       |
 |                                                                    |
 | CiviCRM is distributed in the hope that it will be useful, but     |
 | WITHOUT ANY WARRANTY; without even the implied warranty of         |
 | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
 | See the GNU Affero General Public License for more details.        |
 |                                                                    |
 | You should have received a copy of the GNU Affero General Public   |
 | License along with this program; if not, contact CiviCRM LLC       |
 | at info[AT]civicrm[DOT]org. If you have questions about the        |
 | GNU Affero General Public License or the licensing of CiviCRM,     |
 | see the CiviCRM license FAQ at http://civicrm.org/licensing        |
 +--------------------------------------------------------------------+
*/

/**
 *
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2009
 * $Id$
 *
 */

require_once 'CRM/Report/Form/Case/CaseReportBase.php';

class CRM_Report_Form_Case_Calls extends CRM_Report_Form_Case_CaseReportBase {

   	protected $_emailField         = false;
 	protected $_customGroupExtends = array( 'Case' ); 
	protected $_customGroupGroupBy = true;

    function __construct( ) {
        $this->_columns = array(  
				'all_phone_calls'	=>
				array( 	'dao'	=>	'CRM_Activity_DAO_PhoneCall',
					'fields'	=>
					array(  
						'client_name' => array( 'name' => 'client_name', 'title' => ts('Client'), 'required' => true ),
						'age' => array( 'name' => 'age', 'title' => ts('Age'), 'default' => false ),
						'date_time' => array( 'name' => 'date_time', 'title' => ts('Date/Time'), 'default' => false ),
						),
                                       	'filters' =>   
					array( 'type_of_call'  =>	array( 'title'  => ts( 'Call Type' ), 
									'operatorType' => CRM_Report_Form::OP_MULTISELECT, 
									'options'      => array('Incoming' => 'Incoming', 'Outgoing' => 'Outgoing' ),
									),
					 	'age'  =>	array( 'title'  => ts( 'Age' ), 
									'operatorType' => CRM_Report_Form::OP_INT 
									),
					 	'date_time'  =>	array( 'title'  => ts( 'Date/Time of Call' ), 
									'operatorType' => CRM_Report_Form::OP_DATE
									)
						),
					'alias'	=>	'phone_calls',
				),

 
                                  );
        
        parent::__construct( );
    }

    function select( ) {
        $select = array( );
        $this->_columnHeaders = array( );

        foreach ( $this->_columns as $tableName => $table ) {
            if ( array_key_exists('fields', $table) ) {
                foreach ( $table['fields'] as $fieldName => $field ) {
                    if ( CRM_Utils_Array::value( 'required', $field ) ||
                         CRM_Utils_Array::value( $fieldName, $this->_params['fields'] ) ) {
                        if ( $tableName == 'civicrm_email' ) {
                            $this->_emailField = true;
                        } 

                        $select[] = "{$field['dbAlias']} as {$tableName}_{$fieldName}";
                        $this->_columnHeaders["{$tableName}_{$fieldName}"]['type']  = CRM_Utils_Array::value( 'type', $field );
                        $this->_columnHeaders["{$tableName}_{$fieldName}"]['title'] = CRM_Utils_Array::value( 'title', $field );
                        $this->_columnHeaders["{$tableName}_{$fieldName}"]['no_display'] = CRM_Utils_Array::value( 'no_display', $field );
                    }
                }
            }
        }

	//print_r($select);

        $this->_select = "SELECT " . implode( ', ', $select ) . " ";

    }

    function from( )
    {
        $this->_from = "
        FROM all_phone_calls {$this->_aliases['all_phone_calls']} ";
    }

    function _from( ) {

        $this->_from = "
        FROM civicrm_activity {$this->_aliases['civicrm_activity']}
        
             LEFT JOIN civicrm_activity_target  {$this->_aliases['civicrm_activity_target']} 
                    ON {$this->_aliases['civicrm_activity']}.id = {$this->_aliases['civicrm_activity_target']}.activity_id 
             LEFT JOIN civicrm_activity_assignment {$this->_aliases['civicrm_activity_assignment']}
                    ON {$this->_aliases['civicrm_activity']}.id = {$this->_aliases['civicrm_activity_assignment']}.activity_id 
             LEFT JOIN civicrm_contact contact_civireport
                    ON {$this->_aliases['civicrm_activity']}.source_contact_id = contact_civireport.id 
             LEFT JOIN civicrm_contact civicrm_contact_target 
                    ON {$this->_aliases['civicrm_activity_target']}.target_contact_id = civicrm_contact_target.id
             LEFT JOIN civicrm_contact civicrm_contact_assignee 
                    ON {$this->_aliases['civicrm_activity_assignment']}.assignee_contact_id = civicrm_contact_assignee.id
		LEFT JOIN civicrm_value_telephone_contact_138 call_details
			ON {$this->_aliases['civicrm_activity']}.id = call_details.entity_id
            
             {$this->_aclFrom}
             LEFT JOIN civicrm_option_value 
                    ON ( {$this->_aliases['civicrm_activity']}.activity_type_id = civicrm_option_value.value )
             LEFT JOIN civicrm_option_group 
                    ON civicrm_option_group.id = civicrm_option_value.option_group_id
             LEFT JOIN civicrm_case_activity case_activity_civireport 
                    ON case_activity_civireport.activity_id = {$this->_aliases['civicrm_activity']}.id
             LEFT JOIN civicrm_case 
                    ON case_activity_civireport.case_id = civicrm_case.id
             LEFT JOIN civicrm_case_contact 
                    ON civicrm_case_contact.case_id = civicrm_case.id ";
        //}
    }

    function where()
    {

	$clauses = array( );
        foreach ( $this->_columns as $tableName => $table ) {
            if ( array_key_exists('filters', $table) ) {

                foreach ( $table['filters'] as $fieldName => $field ) {
                    $clause = null;
                    if ( $field['type'] & CRM_Utils_Type::T_DATE ) {
                        $relative = CRM_Utils_Array::value( "{$fieldName}_relative", $this->_params );
                        $from     = CRM_Utils_Array::value( "{$fieldName}_from"    , $this->_params );
                        $to       = CRM_Utils_Array::value( "{$fieldName}_to"      , $this->_params );

                        $clause = $this->dateClause( $field['name'], $relative, $from, $to, $field['type'] );
                    } else {
                        $op = CRM_Utils_Array::value( "{$fieldName}_op", $this->_params );
                        if ( $op ) {
                            $clause =
                                $this->whereClause( $field,
                                                    $op,
                                                    CRM_Utils_Array::value( "{$fieldName}_value", $this->_params ),
                                                    CRM_Utils_Array::value( "{$fieldName}_min", $this->_params ),
                                                    CRM_Utils_Array::value( "{$fieldName}_max", $this->_params ) );
                        }
                    }

                    if ( ! empty( $clause ) ) {
                        $clauses[] = $clause;
                    }
                }
            }
        }

        if ( empty( $clauses ) ) {
            $this->_where = " ";
        } else {
            $this->_where = " WHERE " . implode( ' AND ', $clauses );
        }
	
    }

    function _where( ) {
        $this->_where = " WHERE civicrm_option_group.name = 'activity_type' AND 
                                {$this->_aliases['civicrm_activity']}.is_test = 0";
        $clauses = array( );
        foreach ( $this->_columns as $tableName => $table ) {
            if ( array_key_exists('filters', $table) ) {

                foreach ( $table['filters'] as $fieldName => $field ) {
                    $clause = null;
                    if ( $field['type'] & CRM_Utils_Type::T_DATE ) {
                        $relative = CRM_Utils_Array::value( "{$fieldName}_relative", $this->_params );
                        $from     = CRM_Utils_Array::value( "{$fieldName}_from"    , $this->_params );
                        $to       = CRM_Utils_Array::value( "{$fieldName}_to"      , $this->_params );
                        
                        $clause = $this->dateClause( $field['name'], $relative, $from, $to, $field['type'] );
                    } else {
                        $op = CRM_Utils_Array::value( "{$fieldName}_op", $this->_params );
                        if ( $op ) {
                            $clause = 
                                $this->whereClause( $field,
                                                    $op,
                                                    CRM_Utils_Array::value( "{$fieldName}_value", $this->_params ),
                                                    CRM_Utils_Array::value( "{$fieldName}_min", $this->_params ),
                                                    CRM_Utils_Array::value( "{$fieldName}_max", $this->_params ) );
                        }
                    }
                    
                    if ( ! empty( $clause ) ) {
                        $clauses[] = $clause;
                    }
                }
            }
        }

        if ( empty( $clauses ) ) {
            $this->_where .= " ";
        } else {
            $this->_where .= " AND " . implode( ' AND ', $clauses );
        }
         
        if ( $this->_aclWhere ) {
            $this->_where .= " AND {$this->_aclWhere} ";
        } 
    }

    function groupBy( ) {
        $this->_groupBy   =  ''; //array();
	/*
        if ( ! empty($this->_params['group_bys']) ) {
            foreach ( $this->_columns as $tableName => $table ) {
                if ( ! empty($table['group_bys']) ) {
                    foreach ( $table['group_bys'] as $fieldName => $field ) {
                        if ( CRM_Utils_Array::value( $fieldName, $this->_params['group_bys'] ) ) {
                            $this->_groupBy[] = $field['dbAlias'];
                        }
                    }
                }
            }
        }
        $this->_groupBy[] = "{$this->_aliases['civicrm_activity']}.id";
        $this->_groupBy   = "GROUP BY " . implode( ', ', $this->_groupBy ) . " ";
	*/
    }

    function buildACLClause( $tableAlias ) {
        //override for ACL( Since Cotact may be source
        //contact/assignee or target also it may be null )
        
        require_once 'CRM/Core/Permission.php';
        require_once 'CRM/Contact/BAO/Contact/Permission.php';
        if ( CRM_Core_Permission::check( 'view all contacts' ) ) {
            $this->_aclFrom = $this->_aclWhere = null;
            return;
        }
        
        $session = CRM_Core_Session::singleton( );
        $contactID =  $session->get( 'userID' );
        if ( ! $contactID ) {
            $contactID = 0;
        }
        $contactID = CRM_Utils_Type::escape( $contactID, 'Integer' );
        
        CRM_Contact_BAO_Contact_Permission::cache( $contactID );
        $clauses = array();
        foreach( $tableAlias as $k => $alias ) {
            $clauses[] = " INNER JOIN civicrm_acl_contact_cache aclContactCache_{$k} ON ( {$alias}.id = aclContactCache_{$k}.contact_id OR {$alias}.id IS NULL ) AND aclContactCache_{$k}.user_id = $contactID ";  
        }
        
        $this->_aclFrom  = implode(" ", $clauses );
        $this->_aclWhere = null;
    }


    function statistics( &$rows ) {
        $statistics = parent::statistics( $rows );

	/* Total Incoming Calls
        $select = "select SUM(TTL) as total_calls ";// from all_phone_calls"; // where type_of_calls='Incoming'
        
        $sql = "{$select} {$this->_from} {$this->_where}";
        $dao = CRM_Core_DAO::executeQuery( $sql );

        if ( $dao->fetch( ) ) {
            $statistics['counts']['total_calls'] = array( 'value' => $dao->total_calls,
                                                     'title' => 'Total Calls');

        }
	*/

        return $statistics;
    }

    function _getTotal($month = null, $type = null, $age = null)
    {
        $select = "select count(*) as total_calls from all_phone_calls ";

	if($month || $type || $age)
	{
		$select .= "where ";

	if($month)
		$select .=  $this->_months[$month]. "=1 AND"; 

	if($type)	
		$select .= " type_of_call='".$type."' AND";

	if($age)
		$select .= " age".$age;// from all_phone_calls"; // where type_of_calls='Incoming'
	}

        $sql = "{$select}";
	//CRM_Core_Error::debug('sql', $sql);             
        $dao = CRM_Core_DAO::executeQuery( $sql );

        if ( $dao->fetch( ) ) {
            return $dao->total_calls;
        }


    }

    function postProcess( ) {
        //$this->buildACLClause( array( 'contact_civireport' , 'civicrm_contact_target', 'civicrm_contact_assignee' ) );

	// get ready with post process params
        $this->beginPostProcess( );

	$this->assign ( 'columnHeaders', $this->_columnHeaders );

	
	$rows['in'] = array();
	$rows['in']['adult'] = array();
        $rows['in']['child'] = array();
	$rows['out'] = array();
	$rows['out']['adult'] = array();
        $rows['out']['child'] = array();
	$rows['out']['adult']['total'] = 0; // $row['out']['adult'][$i];
	$rows['out']['child']['total'] = 0; // $row['out']['adult'][$i];
	$rows['in']['child']['total'] = 0; // $row['out']['adult'][$i];
	$rows['in']['adult']['total'] = 0; // $row['out']['adult'][$i];
	$rows['total_calls'] = 0; //$this->_getTotal();
	$rows['out']['adult']['avg'] = 0; //$rows['out']['adult']['total']/12;
	$rows['out']['child']['avg'] = 0; //$rows['out']['child']['total']/12;
	$rows['in']['adult']['avg'] = 0; //$rows['out']['child']['total']/12;
	$rows['in']['child']['avg'] = 0; //$rows['out']['child']['total']/12;

	foreach($this->_months as $i => $mon)
	{
		$rows['out']['adult'][$mon] = $this->_getTotal($i,'Outgoing','>=18'); 
		$rows['out']['adult']['total'] += $rows['out']['adult'][$i];

        	$rows['out']['child'][$mon] = $this->_getTotal($i,'Outgoing','<18');
		$rows['out']['child']['total'] += $rows['out']['child'][$i];
		$rows['out'][$mon] = $rows['out']['adult'][$i] + $rows['out']['child'][$i]; 

		$rows['in']['adult'][$mon] = $this->_getTotal($i,'Incoming','>=18'); 
		$rows['in']['adult']['total'] += $rows['in']['adult'][$i];

        	$rows['in']['child'][$mon] = $this->_getTotal($i,'Incoming','<18'); 
		$rows['in']['child']['total'] += $rows['in']['child'][$i];
		$rows['in'][$mon] = $rows['in']['adult'][$i] + $rows['in']['child'][$i]; 
	}

	$rows['out']['total'] = 0; // rows['out']['child']['total'] + rows['out']['adult']['total'];
	$rows['out']['total'] = $rows['out']['child']['total'] + $rows['out']['adult']['total'];
	$rows['in']['total'] = 0; // rows['out']['child']['total'] + rows['out']['adult']['total'];
	$rows['in']['total'] = $rows['in']['child']['total'] + $rows['in']['adult']['total'];
	$rows['total_calls'] = $this->_getTotal();
	$rows['out']['adult']['avg'] = $rows['out']['adult']['total']/12;
	$rows['out']['child']['avg'] = $rows['out']['child']['total']/12;
	$rows['in']['adult']['avg'] = $rows['out']['child']['total']/12;
	$rows['in']['child']['avg'] = $rows['out']['child']['total']/12;
	
	//CRM_Core_Error::debug('rows', $rows);             
        $this->assign_by_ref( 'rows', $rows );
        $this->assign( 'statistics', $this->statistics( $rows ) );

        $this->formatDisplay( $rows );

        // build array of result based on column headers. This method also allows
        // modifying column headers before using it to build result set i.e $rows.
	//$sql  = $this->buildQuery( true );
	CRM_Core_Error::debug('sql', $sql);             

        //parent::buildRows ( $sql, $rows );

        // format result set.
        $this->formatDisplay( $rows );

        // assign variables to templates
        $this->doTemplateAssignment( $rows );

        // do print / pdf / instance stuff if needed
        parent::endPostProcess( $rows );

        
        //parent::postProcess();
    }

   /*
    function alterDisplay( &$rows ) {
        // custom code to alter rows
        
        $entryFound     = false;
        $activityType   = CRM_Core_PseudoConstant::activityType( true, true );
        $activityStatus = CRM_Core_PseudoConstant::activityStatus();
        $viewLinks      = false;

        require_once 'CRM/Core/Permission.php';
        if ( CRM_Core_Permission::check( 'access CiviCRM' ) ) {
            $viewLinks  = true;
            $onHover    = ts('View Contact Summary for this Contact');
            $onHoverAct = ts('View Activity Record');
        }
        foreach ( $rows as $rowNum => $row ) {
            
            if ( array_key_exists('civicrm_contact_contact_source', $row ) ) {
                if ( $value = $row['civicrm_contact_source_contact_id'] ) {
                    if ( $viewLinks ) {
                        $url = CRM_Utils_System::url( "civicrm/contact/view"  , 
                                                      'reset=1&cid=' . $value ,
                                                      $this->_absoluteUrl );
                        $rows[$rowNum]['civicrm_contact_contact_source_link' ] = $url;
                        $rows[$rowNum]['civicrm_contact_contact_source_hover'] = $onHover;
                    }
                    $entryFound = true; 
                }
            }
            
            if ( array_key_exists('civicrm_contact_contact_assignee', $row ) ) {
                if ( $value = $row['civicrm_activity_assignment_assignee_contact_id'] ) {
                    if ( $viewLinks ) {
                        $url = CRM_Utils_System::url( "civicrm/contact/view"  , 
                                                      'reset=1&cid=' . $value ,
                                                      $this->_absoluteUrl );
                        $rows[$rowNum]['civicrm_contact_contact_assignee_link' ] = $url; 
                        $rows[$rowNum]['civicrm_contact_contact_assignee_hover'] = $onHover;
                    }
                    $entryFound = true; 
                }
            }
            
            if ( array_key_exists('civicrm_contact_contact_target', $row ) ) {
                if ( $value = $row['civicrm_activity_target_target_contact_id'] ) {
                    if ( $viewLinks ) {
                        $url = CRM_Utils_System::url( "civicrm/contact/view"  , 
                                                      'reset=1&cid=' . $value ,
                                                      $this->_absoluteUrl );
                        $rows[$rowNum]['civicrm_contact_contact_target_link' ] = $url; 
                        $rows[$rowNum]['civicrm_contact_contact_target_hover'] = $onHover;
                    }
                    $entryFound = true; 
                }
            }
            
            if ( array_key_exists('civicrm_activity_activity_type_id', $row ) ) {
                if ( $value = $row['civicrm_activity_activity_type_id'] ) {
                    $rows[$rowNum]['civicrm_activity_activity_type_id'] = $activityType[$value];
                    if ( $viewLinks ) {
                        // case activities get a special view link
                        if ( $rows[$rowNum]['civicrm_case_activity_case_id'] ) {
                            $url = CRM_Utils_System::url( "civicrm/case/activity/view"  , 
                                                          'reset=1&cid=' . $rows[$rowNum]['civicrm_contact_source_contact_id'] .
                                                          '&aid=' . $rows[$rowNum]['civicrm_activity_id'] . '&caseID=' . $rows[$rowNum]['civicrm_case_activity_case_id'],
                                                          $this->_absoluteUrl );
                        } else {
                            $url = CRM_Utils_System::url( "civicrm/contact/view/activity"  , 
                                                          'action=view&reset=1&cid=' . $rows[$rowNum]['civicrm_contact_source_contact_id'] .
                                                          '&id=' . $rows[$rowNum]['civicrm_activity_id'] . '&atype=' . $value ,
                                                          $this->_absoluteUrl );
                        }
                        $rows[$rowNum]['civicrm_activity_activity_type_id_link'] = $url;
                        $rows[$rowNum]['civicrm_activity_activity_type_id_hover'] = $onHoverAct;
                    }
                    $entryFound = true;
                }
            }
            
            if ( array_key_exists('civicrm_activity_status_id', $row ) ) {
                if ( $value = $row['civicrm_activity_status_id'] ) {
                    $rows[$rowNum]['civicrm_activity_status_id'] = $activityStatus[$value];
                    $entryFound = true;
                }
            }
            
            if ( !$entryFound ) {
                break;
            }
        }
    }
	*/
}
