//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// A presenter calls methods of a view to update the information that the view displays. 
// The view exposes its methods through an interface definition, and the presenter contains
// a reference to the view interface. This allows you to test the presenter with different 
// implementations of a view (for example, a mock view).
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using Microsoft.Practices.ObjectBuilder;
using Microsoft.Practices.CompositeUI;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.SmartParts;
using Sante.EMR.SmartClient.Infrastructure.Module.ConnectionMonitor.Services;
//using Sante.EMR.SmartClient.OutBox.DSA.DataService;
using Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;
using Sante.EMR.SmartClient.Infrastructure.Interface.Constants;
using Microsoft.Practices.CompositeUI.EventBroker;
using Sante.EMR.SmartClient.OutBox.Properties;
using Sante.EMR.SmartClient.OutBox.Constants;
using ConstantsAlias = Sante.EMR.SmartClient.Infrastructure.Interface.Constants;
using Sante.EMR.SmartClient.OutBox.Services;

namespace Sante.EMR.SmartClient.OutBox
{
    public partial class OutBoxViewPresenter : Presenter<IOutBoxView>
    {
        IConnectionMonitorService _connectionMonitor;

        
        IFormHandlerService _formhandlerService;
    
        /// <summary>
        /// 
        /// </summary>
        /// <param name="connectionMonitor"></param>
        public OutBoxViewPresenter([ServiceDependency] IConnectionMonitorService connectionMonitor, 
                                   [ServiceDependency] IFormHandlerService formHandlerService)
        {
            //_formhandlerService = formHandlerService;
            //_formhandlerService.SaveFormEvent += new EventHandler<EventArgs<Form>>(_formhandlerService_SaveFormEvent);

            _connectionMonitor = connectionMonitor;

        }

        [EventSubscription("SaveFormEvent", ThreadOption.UserInterface)]
        private void _formhandlerService_SaveFormEvent(object sender, EventArgs<Form> e)
        {
            int i = 0;
            //throw new Exception("The method or operation is not implemented.");
        }

        [EventSubscription("SaveFormEvent", ThreadOption.UserInterface)]
        public bool SaveForm(object sender, EventArgs<Form> form)
        {
            //_forms.Add(form.Data);

            // AddToQueue(form.Data);
            View.UpdateOutbox(form.Data);

            return true;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void SendFormsReturn(object sender, EventArgs<Sante.EMR.SmartClient.OutBox.DataWebService.Form[]> e)
        {
            OnLongProcess(false);
            //OnStatusUpdate(Resources.RestaurantsListRecieved);
            //View.ShowRestaurants(e.Data);
        }

        /// <summary>
        /// This method will be called when the service agent gets an
        /// exception when calling the GetRestaurants method.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e">Exception thrown</param>
        private void SendFormsException(object sender, EventArgs<Exception> e)
        {
            OnLongProcess(false);
            if (Connected)
            {
                //OnStatusUpdate(Resources.ErrorRetrievingRestaurantsList);
                View.ShowConnectionError();
            }
            else
            {
                View.ShowOfflineMessage();
            }
        }

        [EventPublication(ConstantsAlias.EventTopicNames.StatusUpdate, PublicationScope.Global)]
        public event EventHandler<EventArgs<string>> StatusUpdate;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        private void OnStatusUpdate(string message)
        {
            if (StatusUpdate != null)
            {
                StatusUpdate(this, new EventArgs<string>(message));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="running"></param>
        private void OnLongProcess(bool running)
        {
            //if (LongProcess != null)
            //{
            //    LongProcess(this, new EventArgs<bool>(running));
            //}
        }


        /// <summary>
        /// This method is a placeholder that will be called by the view when it has been loaded.
        /// </summary>
        public override void OnViewReady()
        {
            base.OnViewReady();
        }

        /// <summary>
        /// Close the view
        /// </summary>
        public void OnCloseView()
        {
            base.CloseView();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="form"></param>
        [EventSubscription(ConstantsAlias.EventTopicNames.Add, ThreadOption.UserInterface)]
        public void Add(object sender, EventArgs<Form> form)
        {
            int i = 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="smartPartInfoType"></param>
        /// <returns></returns>
        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            ISmartPartInfo result =
            (ISmartPartInfo)Activator.CreateInstance(smartPartInfoType);
            result.Title = Properties.Resources.ModuleTitle;//String.Format("Case List #{0}", this._caseQueue.Id);
            result.Description = "Forms Outbox.";

            return result;

        }

        /// <summary>
        /// 
        /// </summary>
        private bool Connected
        {
            get { return _connectionMonitor.IsConnected(); }
        }

        [EventSubscription(ConstantsAlias.EventTopicNames.SaveFormEvent, ThreadOption.UserInterface)]
        public void OnAdd(object sender, EventArgs<Form> eventArgs)
        {//TODO: Add your code here
            int i = 0;
        }

        [EventSubscription(ConstantsAlias.EventTopicNames.SaveFormEvent, ThreadOption.UserInterface)]
        public void OnSaveFormEvent(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            int i = 0;
        }
    }
}

