//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------
using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using Sante.EMR.SmartClient.Module.Constants;
using BusinessEntitiesAlias = Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI;
using Sante.EMR.SmartClient.Infrastructure.Module.ConnectionMonitor.Services;
using Sante.EMR.SmartClient.Infrastructure.Data;
using Sante.EMR.SmartClient.Infrastructure.Data.EntityTranslators;
using Sante.EMR.SmartClient.Infrastructure.Interface.Services;
using Sante.EMR.SmartClient.Infrastructure.Data.Services;
using Sante.EMR.SmartClient.Module.Services;
 
namespace Sante.EMR.SmartClient.Module
{
    [Serializable]
    public partial class OutboxView : UserControl, IOutboxView
    {
        IConnectionMonitorService _connection;
        IDataAccessService _dataService;
        BusinessEntitiesAlias.Form _selectedForm;
        IOutboxService _outbox;

        public OutboxView([ServiceDependency] IConnectionMonitorService conn,
                          [ServiceDependency] IDataAccessService dataAccess,
                          [ServiceDependency] IOutboxService outbox)
        {
            InitializeComponent();
            _connection = conn;
            _dataService = dataAccess;
            _outbox = outbox;
            //_outbox.UpdateView += new EventHandler(_outbox_UpdateView);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void _outbox_UpdateView(object sender, EventArgs e)
        {
            OnLoad(e);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);

            UpdateBindingSource();
        }

      
        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void toolStripButton1_Click(object sender, System.EventArgs e)
        {
            bool success = _outbox.SendForm(_selectedForm);

            if (!success)
            {
                MessageBox.Show("Failed to successfully send form. Please check the log for details.");
            }
            else
            {
                MessageBox.Show("Form was successfully transmitted!");
            }
           
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dataGridView_SelectionChanged(object sender, EventArgs e)
        {
            if (dataGridView.SelectedRows.Count == 1 && dataGridView.SelectedRows[0] != null)
            {
                _selectedForm = (BusinessEntitiesAlias.Form)dataGridView.SelectedRows[0].DataBoundItem;
            }
            
        }

        #region IOutboxView Members

        public BindingSource UpdateBindingSource()
        {
            formBindingSource.Clear();

            foreach (BusinessEntitiesAlias.Case c in _presenter.Cases)
            {
                foreach (BusinessEntitiesAlias.Form f in c.Forms)
                {
                    formBindingSource.Add(f);
                }
            }

            return formBindingSource;
            
        }

        #endregion

        
        
    }
}

