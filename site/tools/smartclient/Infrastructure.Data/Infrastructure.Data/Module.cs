//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Foundational Module" recipe.
//
// The Module class derives from the CAB base class ModuleInit and it will be instantiated
// when the module is loaded by the CAB infrastructure.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-020-How_to_Create_a_Business_Module.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.ObjectBuilder;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI.EventBroker;
using Sante.EMR.SmartClient.Infrastructure.Interface.Services;
using Sante.EMR.SmartClient.Infrastructure.Data.EntityTranslators;
using DataServiceAlias = Sante.EMR.SmartClient.Infrastructure.Data.DataWebService;
using BusinessEntitiesAlias = Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;

namespace Sante.EMR.SmartClient.Infrastructure.Data
{
    public class Module : ModuleInit
    {
        private WorkItem _rootWorkItem;

        [InjectionConstructor]
        public Module([ServiceDependency] WorkItem rootWorkItem)
        {
            _rootWorkItem = rootWorkItem;
        }

        public override void Load()
        {
            base.Load();
            EventArgs<string> ev = new EventArgs<string>(this.GetType() + " successfully loaded...");
            _rootWorkItem.EventTopics[Sante.EMR.SmartClient.Infrastructure.Logger.Constants.EventTopicNames.WriteToLog].Fire(this, ev, _rootWorkItem, PublicationScope.WorkItem);

            RegisterEntityTranslators();
        }

        private void RegisterEntityTranslators()
        {
            IEntityTranslatorService translator = _rootWorkItem.Services.Get<IEntityTranslatorService>(true);
            translator.RegisterEntityTranslator(new CaseTranslator());
            translator.RegisterEntityTranslator(new NextTaskTranslator());
            translator.RegisterEntityTranslator(new PatientTranslator());
            translator.RegisterEntityTranslator(new IntakeFormTranslator());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.Lethality, BusinessEntitiesAlias.Lethality>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.PrivacyPractices, BusinessEntitiesAlias.PrivacyPractices>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.medeval, BusinessEntitiesAlias.medeval>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.AuthorizationRelease, BusinessEntitiesAlias.AuthorizationRelease>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.ConsentForServices, BusinessEntitiesAlias.ConsentForServices>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.HumanRights, BusinessEntitiesAlias.HumanRights>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.IHITIndividualTreatment, BusinessEntitiesAlias.IHITIndividualTreatment>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.InformedConsent, BusinessEntitiesAlias.InformedConsent>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.MCTAssessmentAndTreatment, BusinessEntitiesAlias.MCTAssessmentAndTreatment>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.MCTDispatch, BusinessEntitiesAlias.MCTDispatch>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.ProgressNote, BusinessEntitiesAlias.ProgressNote>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.Telephone, BusinessEntitiesAlias.Telephone>());
            translator.RegisterEntityTranslator(new TranslatorFactory<DataServiceAlias.InformedMedicationConsent,BusinessEntitiesAlias.InformedMedicationConsent>());
        }

    }
}
