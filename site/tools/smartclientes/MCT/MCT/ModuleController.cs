//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add Business Module" recipe.
//
// This class contains placeholder methods for the common module initialization 
// tasks, such as adding services, or user-interface element
//
// For more information see: 
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-08-060-Add_Business_Module_Next_Steps.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.Commands;
using Sante.EMR.SmartClient.MCT.Constants;
using Sante.EMR.SmartClient.MCT.Properties;
using Microsoft.Practices.CompositeUI.EventBroker;
using Sante.EMR.SmartClient.MCT.Views;

namespace Sante.EMR.SmartClient.MCT
{
    public class ModuleController : WorkItemController
    {
        public override void Run()
        {
            AddServices();
            ExtendMenu();
            ExtendToolStrip();
            AddViews();
        }

        private void AddServices()
        {
            //TODO: add services provided by the Module. See: Add or AddNew method in 
            //		WorkItem.Services collection or see ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.2005Nov.cab/CAB/html/03-020-Adding%20Services.htm
        }

        private void ExtendMenu()
        {
            //TODO: add menu items here, normally by calling the "Add" method on
            //		on the WorkItem.UIExtensionSites collection. For an example 
            //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-340-Showing_UIElements.htm

            ToolStripMenuItem menu = new ToolStripMenuItem(Properties.Resource.ModuleTitle);


            //WorkItem.Commands[CommandNames.New].AddInvoker(item, "Click");

            WorkItem.UIExtensionSites[UIExtensionSiteNames.NewMenu].Add(menu);
        }

        private void ExtendToolStrip()
        {
            this.RegisterLaunchPoint(Properties.Resource.ModuleTitle, Properties.Resource.mcticon, CommandNames.MCTMenu);
        }

        private void AddViews()
        {
            //TODO: create the Module views, add them to the WorkItem and show them in 
            //		a Workspace. See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/03-01-040-How_to_Add_a_View_with_a_Presenter.htm

            // To create and add a view you can customize the following sentence
            // SampleView view = ShowViewInWorkspace<SampleView>(WorkspaceNames.SampleWorkspace);

        }

        [CommandHandler(CommandNames.MCTMenu)]
        public void OnMCTFormSelection(object sender, EventArgs e)
        {
            
            ShowViewInWorkspace<MCTView>(WorkspaceNames.PrimaryWorkspace);
        }

        [CommandHandler(CommandNames.ShowSigPad)]
        public void OnShowSigPad(object sender, EventArgs e)
        {
            ShowViewInWorkspace<SigPad>(WorkspaceNames.ModalWindows);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>
     
        [EventSubscription(EventTopicNames.ShowNewAssessmentTreatment, ThreadOption.UserInterface)]
        public void OnShowNewAssessmentTreatment(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<NewAssessmentTreatmentView>(WorkspaceNames.ModalWindows);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sender"></param>

        [EventSubscription(EventTopicNames.ShowNewMCTDispatch, ThreadOption.UserInterface)]
        public void OnShowMCTDispatch(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<MCTDispatchView>(WorkspaceNames.ModalWindows);
        }

        [EventSubscription(EventTopicNames.ShowCaseNumberSelection, ThreadOption.UserInterface)]
        public void OnShowCaseNumberSelection(object sender, EventArgs<string> eventArgs)
        {
            ShowViewInWorkspace<SelectCaseNumberView>(WorkspaceNames.ModalWindows);

        }

        [EventSubscription(EventTopicNames.ShowNewConsentForServices, ThreadOption.UserInterface)]
        public void OnShowNewConsentForServices(object sender, EventArgs<string> eventArgs)
        {
            ShowViewInWorkspace<ConsentForServicesView>(WorkspaceNames.ModalWindows);

        }

        [EventSubscription(EventTopicNames.ShowNewAuthorizationToRelease, ThreadOption.UserInterface)]
        public void OnShowNewAuthorizationToRelease(object sender, EventArgs eventArgs)
        {//TODO: Add your code here
            ShowViewInWorkspace<AuthorizationToReleaseView>(WorkspaceNames.ModalWindows);

        }

        [EventSubscription(EventTopicNames.ShowPrivacyPracticesForm, ThreadOption.UserInterface)]
        public void OnShowAcknowledgementForm(object sender, EventArgs eventArgs)
        {
            ShowViewInWorkspace<PrivacyPracticesView>(WorkspaceNames.ModalWindows);

        }

        

        //TODO: Add CommandHandlers and/or Event Subscriptions
        //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-350-Registering_Commands.htm
        //		See: ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-04-320-Publishing_and_Subscribing_to_Events.htm
    }
}
