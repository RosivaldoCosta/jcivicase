//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Microsoft.Practices.CompositeUI;
using Sante.EMR.SmartClient.Module.Services;
using Microsoft.Practices.CompositeUI.EventBroker;
using Sante.EMR.SmartClient.MCT.Constants;
using Sante.EMR.SmartClient.MCT.Services;

namespace Sante.EMR.SmartClient.MCT
{
    public partial class SelectCaseNumberView : UserControl, ISelectCaseNumberView
    {
        private IOutboxService _outbox;
        private IWorkflowStateService _workflow;
        public SelectCaseNumberView([ServiceDependency] IOutboxService outbox,
                                    [ServiceDependency] IWorkflowStateService workflow)
        {
            _outbox = outbox;
            _workflow = workflow;
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);
        }

        private void SelectCaseNumberView_Load(object sender, EventArgs e)
        {
            foreach (string num in _outbox.GetCaseNumbers())
            {
                this.CaseNumberList.Items.Add(num);
            }
        }

        private void OkButton_Click(object sender, EventArgs e)
        {
            
            if (_workflow.NextForm != null)
            {

                if (!String.IsNullOrEmpty(CaseNumberList.Text))
                {
                    try
                    {
                        _workflow.CaseNumber = Convert.ToInt32(CaseNumberList.Text);
                        _presenter.ShowNextForm(_workflow.NextForm, CaseNumberList.Text);

                        ((Form)this.Parent).Close();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message);
                    }
                }
                else
                {
                    MessageBox.Show("You must enter in a case number before proceeding");
                }
            }

            
        }

      
        private void CaseNumberList_SelectedIndexChanged(object sender, EventArgs e)
        {

        }
    }
}

