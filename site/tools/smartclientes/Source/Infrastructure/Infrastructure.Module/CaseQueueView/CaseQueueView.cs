//----------------------------------------------------------------------------------------
// patterns & practices - Smart Client Software Factory - Guidance Package
//
// This file was generated by the "Add View" recipe.
//
// This class is the concrete implementation of a View in the Model-View-Presenter 
// pattern. Communication between the Presenter and this class is acheived through 
// an interface to facilitate separation and testability.
// Note that the Presenter generated by the same recipe, will automatically be created
// by CAB through [CreateNew] and bidirectional references will be added.
//
// For more information see:
// ms-help://MS.VSCC.v80/MS.VSIPCC.v80/ms.practices.scsf.2007may/SCSF/html/02-09-010-ModelViewPresenter_MVP.htm
//
// Latest version of this Guidance Package: http://go.microsoft.com/fwlink/?LinkId=62182
//----------------------------------------------------------------------------------------

using System;
using System.Windows.Forms;
using Microsoft.Practices.CompositeUI.SmartParts;
using Microsoft.Practices.ObjectBuilder;
using Sante.EMR.SmartClient.Infrastructure.Interface;
using Sante.EMR.SmartClient.Infrastructure.Interface.BusinessEntities;
using Microsoft.Practices.CompositeUI;
using Microsoft.Practices.CompositeUI.EventBroker;

namespace Sante.EMR.SmartClient.Infrastructure.Module
{
    public partial class CaseQueueView : UserControl, ICaseQueueView, ISmartPartInfoProvider
    {
        protected string _currentFilter;
        private WorkItem _rootWorkItem;
        private int _caseNumber;

        public string Filter
        {
            get
            {
                return _currentFilter;
            }
        }

        
        protected override void OnLoad(EventArgs e)
        {
            _presenter.OnViewReady();
            base.OnLoad(e);

            StatusFilter.SelectedIndex = 0;
        }

        public CaseQueueView([ServiceDependency] WorkItem rootWorkItem)
        {
            InitializeComponent();

            _rootWorkItem = rootWorkItem;
        }


        #region ICaseQueueView Members

        public void BindToCaseQueue(CaseQueue queue)
        {
            caseQueueBindingSource.Clear();

            if( queue != null){
                foreach (Case item in queue)
                {
                    if (StatusFilter.Text == "Active")
                    {
                        if (item.Status == Status.Active) caseQueueBindingSource.Add(item);

                    }
                    else if (StatusFilter.Text == "Unresolved")
                    {
                        if (item.Status == Status.Unresolved) caseQueueBindingSource.Add(item);
                    }
                    else if (StatusFilter.Text == "Follow Ups")
                    {
                        if (item.Status == Status.FollowUp) caseQueueBindingSource.Add(item);
                    }
                    else if (StatusFilter.Text == "East Side IHIT")
                    {
                        if (item.Status == Status.EastIHIT) caseQueueBindingSource.Add(item);
                    }
                    else if (StatusFilter.Text == "West Side IHIT")
                    {
                        if (item.Status == Status.WestIHIT) caseQueueBindingSource.Add(item);
                    }
                    else if (StatusFilter.Text == "MCT")
                    {
                        if (item.Status == Status.MCT) caseQueueBindingSource.Add(item);
                    }
                    else if (StatusFilter.Text == "Frequent Caller")
                    {
                        if (item.Status == Status.FrequentCaller) caseQueueBindingSource.Add(item);
                    }
                    else if (StatusFilter.Text == "All")
                    {
                        caseQueueBindingSource.Add(item);
                    }

                    EventArgs<string> ev = new EventArgs<string>("Filter set to " + StatusFilter.Text);
                    _rootWorkItem.EventTopics[Sante.EMR.SmartClient.Infrastructure.Logger.Constants.EventTopicNames.WriteToLog].Fire(this, ev, _rootWorkItem, PublicationScope.WorkItem);

                }

            }

        }

        public void ShowMessage(string message)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        #endregion

        private void SearchButton_Click(object sender, EventArgs e)
        {
            _presenter.Search();
        }

        private void NewCaseButton_Click(object sender, EventArgs e)
        {
            _presenter.CreateNewCase();
        }

        private void StatusFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            _presenter.OnViewReady();
        
        }

        #region ISmartPartInfoProvider Members

        public ISmartPartInfo GetSmartPartInfo(Type smartPartInfoType)
        {
            return _presenter.GetSmartPartInfo(smartPartInfoType);// throw new Exception("The method or operation is not implemented.");
        }

        #endregion

        private void nextTaskButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/nexttask?CaseNumber="+_caseNumber);
        }

        private void opsButton_Click(object sender, EventArgs e)
        {
            
            this.pageServer.Url = new Uri("http://localhost:8081/opsform");
            //this.pageServer.Refresh(WebBrowserRefreshOption.Normal);
        }

        private void mctButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/mctform");
        }

        private void ihitButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/ihit");
        }

        private void uccButton_Click(object sender, EventArgs e)
        {
            //this.pageServer.
            this.pageServer.Url = new Uri("http://localhost:8081/uccform");
        }

        private void cismButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/cism");
        }

        private void voucherButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/vouchers");
        }

        private void phonecontactButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/phonecontact");
        }

        private void casehistoryButton_Click(object sender, EventArgs e)
        {
            this.pageServer.Url = new Uri("http://localhost:8081/casehistorylog");
        }

        private void dataGridView_SelectionChanged(object sender, EventArgs e)
        {
            if (this.dataGridView.SelectedRows.Count > 0 && this.dataGridView.SelectedRows[0] != null)
            {
                 Case selectedCase = (Case)this.dataGridView.SelectedRows[0].DataBoundItem;
                _caseNumber = selectedCase.CaseNumber;
            }
        }
    }
}

